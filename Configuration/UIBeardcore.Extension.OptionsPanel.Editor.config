<?xml version="1.0"?>
<!-- This is a bare configuration for a Tridion.Web editor -->
<Configuration xmlns="http://www.sdltridion.com/2009/GUI/Configuration/Merge"
               xmlns:cfg="http://www.sdltridion.com/2009/GUI/Configuration"
               xmlns:ext="http://www.sdltridion.com/2009/GUI/extensions"
			   xmlns:list="http://www.sdltridion.com/2009/GUI/extensions/List"
               xmlns:cmenu="http://www.sdltridion.com/2009/GUI/extensions/ContextMenu">

	<!--
		The SDL Tridion GUI uses a merging technique to minimize the amount of calls done by the client
		for static files (like .css and .js file).
		The files can be grouped and will be merged per group (if merging is enabled on the group)
		For debugging purposes the merging behavior can be switched off by setting the merge attribute to false.
	-->
	<resources>
		
		<cfg:filters />
		
		<cfg:extensiongroups />
		
		<cfg:groups />
		
	</resources>

	<definitionfiles>
		<!-- List definitions -->
	</definitionfiles>

	<!--
		The SDL Tridion GUI allows for additions, manipulations and removal of items within the GUI through
		the 'extension methodology'.

		Below is the configuration section for those extensions.
		These configuration sections can be defined inline or external (if the externaldefinition is used, all
		inline content is ignored!)
	-->
	<extensions>
		<ext:editorextensions>
			<ext:editorextension target="CME">
				<ext:editurls />
				<ext:listdefinitions />
				<ext:itemicons />
				<ext:taskbars />
				<ext:commands />
				<ext:commandextensions/>
				<ext:contextmenus />
				<ext:lists/>
				<ext:xslstylesheetextensions />
				<ext:deckpages />
				<ext:tabpages />
				<ext:toolbars />
				<ext:ribbontoolbars/>
				<ext:extendedareas />

				<!-- The `optionspanels` element is the container for the OptionsPanel extensions-->
				<ext:optionspanels>

					<!-- The `add` element is the container for all extension being added to the runtime -->
					<ext:add>

						<!-- Defines an extension to add to the runtime
							@assignid Uniq ID of the extension
							@name Defines the extension name 
							@insertbefore Extension location. The elemend before which the extension element will be placed
						-->
						<ext:extension assignid="UIBeardcore.Lists.AddedExtendedColumn" name="UIBeardcore.Lists.AddedExtendedColumn" insertbefore="FromPub">

							<!-- The `pageurl` element hold the ASCX user control (filename, relative to root of project) -->
							<ext:pageurl></ext:pageurl>
							
							<!-- The `pagetype` element hold the definition of the extension control client side name -->
							<ext:pagetype></ext:pagetype>

							<!-- The `title` element defines a title displayed in a toolbar associated with the command -->
							<ext:title></ext:title>

							<!-- The `type` element hold the option type
								it might be either `Option`(default) or `Separator`
							-->
							<ext:type>Option</ext:type>

							<!-- The `dependencies` element is the container for resource group dependencies for this extension -->
							<ext:dependencies>
								<cfg:dependency>UIBeardcore.Editors.ListExtensions.Translators</cfg:dependency>
							</ext:dependencies>

							<!-- The `apply` element defines the applicability for this extension -->
							<ext:apply>
								<ext:view name="DashboardView">
									<ext:control id="FilteredItemsList" />
								</ext:view>
							</ext:apply>
						</ext:extension>
					</ext:add>

					<!-- The `remove` element is the container for all extensions being removed from the runtime -->
					<ext:remove>

						<!-- Defines an extension to remove from the runtime
							@id Defines an ID of the element to remove
							@name Defines the extension name 
						-->
						<ext:extension id="NamedType" name="UIBeardcore.RemoveIconColumn">

							<!-- The `apply` element defines the applicability for this extension -->
							<ext:apply>
								<ext:view name="DashboardView">
									<ext:control id="FilteredItemsList" />
								</ext:view>
							</ext:apply>
						</ext:extension>
					</ext:remove>

				</ext:optionspanels>
			</ext:editorextension>
		</ext:editorextensions>
		<ext:dataextenders />
		<ext:resourceextensions/>
	</extensions>

	<!--
		The SDL Tridion GUI uses a 'Command' pattern for the commands executed whenever a user
		interacts with the system.

		Below are all the available commands specified and the file that holds the actual implementation of that command.
	-->
	<commands />
	
	<contextmenus />
	
	<widgetsviews />
	
	<localization />

	<settings>
		<dependencies>
			<editor>CME</editor>
		</dependencies>
		<defaultpage/>
		<editurls/>
		<listdefinitions />
		<itemicons />
		<theme>
			<path>/Themes/</path>
		</theme>
		<resourceextensions />
		<customconfiguration />
	</settings>

</Configuration>
